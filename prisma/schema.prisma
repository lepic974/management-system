datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ==================== Modèles principaux ====================

// Modèle utilisateur central
model User {
  id                 String     @id @default(cuid())
  userNumber         String     @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  name               String?
  email              String?    @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole   @default(USER)
  status             UserStatus @default(INACTIVE)
  isTwoFactorEnabled Boolean    @default(false)
  phoneNumber        String?
  dateOfBirth        DateTime?
  preferredLanguage  String?
  lastLogin          DateTime?
  isActive           Boolean    @default(true)
  username           String?    @unique
  bio                String?
  link               String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Champs Treezor
  treezorUserId    String?   @unique
  treezorWalletId  String?   @unique
  kycStatus        KYCStatus @default(NONE)
  kycLevel         Int       @default(0)
  residenceCountry String?
  nationality      String?
  birthCountry     String?
  occupationStatus String?
  incomeRange      String?

  // Relations
  address               Address?
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  sessions              Session[]
  stores                Store[]
  wallets               Wallet[]
  transactions          Transaction[]
  cards                 Card[]
  bankAccounts          BankAccount[]
  posts                 Post[]
  followers             Follow[]               @relation("follower")
  followeds             Follow[]               @relation("followed")
  likes                 Like[]
  integrations          Integration[]
  subscriptions         Subscription[]
  authenticators        Authenticator[]
  aiRecommendations     AIRecommendation[]
  preferences           UserPreference[]
  interactions          UserInteraction[]
  beneficiaries         Beneficiary[]
  sepaTransfers         SEPATransfer[]
  payments              Payment[]

  // Relation pour les comptes enfants
  parentId String?
  parent   User?   @relation("ParentChild", fields: [parentId], references: [id])
  children User[]  @relation("ParentChild")
}

// Modèle d'adresse réutilisable
model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  country    String
  postalCode String
  userId     String?  @unique
  storeId    String?  @unique
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  store      Store?   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Card       Card[]
}

// Modèle de compte bancaire
model BankAccount {
  id            String          @id @default(cuid())
  accountNumber String          @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  userId        String
  bankName      String
  iban          String?
  bic           String?
  accountType   BankAccountType
  balance       Float
  currency      Currency
  isMainAccount Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentAccountId String?
  parentAccount   BankAccount?  @relation("SubAccounts", fields: [parentAccountId], references: [id])
  subAccounts     BankAccount[] @relation("SubAccounts")
  cards           Card[]

  @@index([userId])
}

// Modèle de carte (bancaire et de fidélité)
model Card {
  id                         String          @id @default(cuid())
  cardNumber                 String          @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  userId                     String
  cardType                   CardType
  expiryDate                 DateTime?
  cvv                        String?
  points                     Int?
  isActive                   Boolean         @default(true)
  isVirtual                  Boolean         @default(false)
  isEphemeral                Boolean         @default(false)
  cardHolderName             String?
  issuer                     String?
  status                     CardStatus?
  productCode                String?
  cardTag                    String?
  mccRestrictionGroupId      Int?
  merchantRestrictionGroupId Int?
  countryRestrictionGroupId  Int?
  limitId                    Int?
  pin                        String?
  pinStatus                  PinStatus?
  maskedPan                  String?
  embossedName               String?
  usageLimit                 Int?
  usageLimitType             UsageLimitType?
  usageCount                 Int?
  usageAmount                Float?
  lockStatus                 LockStatus?
  storeId                    String?
  bankAccountId              String?
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt

  // Champs Treezor
  treezorCardId String?    @unique
  cardProfileId Int?
  cardStatus    CardStatus
  cardProgram   String?
  cardDesign    String?

  // Relations
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  store             Store?        @relation(fields: [storeId], references: [id])
  bankAccount       BankAccount?  @relation(fields: [bankAccountId], references: [id])
  transactions      Transaction[]
  payments          Payment[]
  deliveryAddress   Address?      @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String?

  @@index([userId])
  @@index([storeId])
  @@index([bankAccountId])
}

// Modèle de portefeuille
model Wallet {
  id        String   @id @default(cuid())
  userId    String
  balance   Float
  currency  Currency
  address   String? // Pour les portefeuilles de cryptomonnaies
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Champs Treezor
  treezorWalletId   String?   @unique
  tariffId          Int?
  eventName         String?
  eventAlias        String?
  eventDate         DateTime?
  eventMessage      String?
  eventInformations Json?

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  sepaTransfers SEPATransfer[]
  payments      Payment[]

  @@unique([userId, currency])
}

// Modèle de transaction
model Transaction {
  id                String              @id @default(cuid())
  transactionNumber String              @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  userId            String
  amount            Bytes // Champ crypté
  currency          Currency
  type              TransactionType
  status            TransactionStatus   @default(PENDING)
  fromWalletId      String?
  toWalletId        String?
  isPayin           Boolean             @default(false)
  isPayout          Boolean             @default(false)
  loyaltyProgramId  String?
  cashbackAmount    Bytes? // Champ crypté
  cashbackCurrency  Currency?
  feeAmount         Bytes? // Champ crypté
  feeType           TransactionFeeType?
  cardId            String?
  terminalId        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  categoryId        String?

  // Champs Treezor
  treezorTransactionId String? @unique
  walletDebitId        String?
  walletCreditId       String?
  payinId              String?
  payoutId             String?
  transferId           String?

  // Relations
  user           User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  loyaltyProgram LoyaltyProgram?      @relation(fields: [loyaltyProgramId], references: [id])
  card           Card?                @relation(fields: [cardId], references: [id])
  category       TransactionCategory? @relation(fields: [categoryId], references: [id])
  location       Location?

  @@index([cardId])
  @@index([terminalId])
  @@index([categoryId])
}

// Modèle de localisation réutilisable
model Location {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
}

// Modèle pour les catégories de transaction
model TransactionCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  transactions Transaction[]
}

// Modèle de magasin
model Store {
  id               String   @id @default(cuid())
  storeNumber      String   @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  name             String
  description      String?
  codePin          String?
  imageUrl         String?
  phoneRequired    Boolean  @default(false)
  phoneCountryCode String?
  phoneNumber      String?
  timeZone         String?
  language         String?
  website          String?
  userId           String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  address         Address?
  loyaltyPrograms LoyaltyProgram[]
  products        Product[]
  rewards         Reward[]
  giftCards       GiftCard[]
  customers       Customer[]
  orders          Order[]
  teamMembers     TeamMember[]
  cards           Card[]
}

// ==================== Modèles d'authentification et de session ====================

// Modèle de confirmation à deux facteurs
model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

// Modèle de compte externe
model Account {
  id                String   @id @default(cuid())
  accountNumber     String   @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modèle de session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ==================== Modèles sociaux et de contenu ====================

// Modèle de publication
model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User   @relation(fields: [authorId], references: [id])
  likes  Like[]
}

// Modèle de suivi
model Follow {
  id         String   @id @default(cuid())
  followerId String
  followedId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  follower User @relation("follower", fields: [followerId], references: [id])
  followed User @relation("followed", fields: [followedId], references: [id])

  @@unique([followerId, followedId])
}

// Modèle de like
model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

// ==================== Modèles de fidélité et de commerce ====================

// Modèle de programme de fidélité
model LoyaltyProgram {
  id                 String   @id @default(cuid())
  programNumber      String   @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  name               String
  description        String?
  storeId            String
  cashbackPercentage Float    @default(1.0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  store        Store         @relation(fields: [storeId], references: [id])
  transactions Transaction[]
}

// Modèle de produit
model Product {
  id          String   @id @default(cuid())
  productCode String   @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  name        String
  description String?
  price       Float
  storeId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])
}

// Modèle de récompense
model Reward {
  id                  String         @id @default(cuid())
  rewardCode          String         @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  name                String
  description         String?
  pointsCost          Int
  evergreenMode       Boolean        @default(false)
  storeId             String
  validity            RewardValidity
  validityDate        DateTime?      @default(now())
  quota               Int?
  CustomerRedeemCount Int?
  //Template card
  cardTemplateId      String?
  imageTemplateUrl    String?
  nameColor           String?
  buttonColor         String?
  backgroundColor     String?
  pointsColor         String?
  buttonTextColor     String?
  buttonText          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])
}

// Modèle de carte cadeau
model GiftCard {
  id         String   @id @default(cuid())
  code       String   @unique
  balance    Float
  isRedeemed Boolean  @default(false)
  storeId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])
}

// Modèle de client
model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])

  @@unique([email, storeId])
}

// Modèle de commande
model Order {
  id          String   @id @default(cuid())
  orderNumber String   @unique @default(dbgenerated("floor(random() * 9000000000 + 1000000000)::text")) // Numéro unique à 10 chiffres
  total       Float
  status      String
  storeId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])
}

// Modèle de membre d'équipe
model TeamMember {
  id        String   @id @default(cuid())
  name      String
  email     String
  role      String
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id])

  @@unique([email, storeId])
}

// ==================== Modèles supplémentaires ====================

// Modèle pour les recommandations IA
model AIRecommendation {
  id        String             @id @default(cuid())
  userId    String
  type      RecommendationType
  content   Json
  isApplied Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modèle pour les préférences utilisateur
model UserPreference {
  id         String   @id @default(cuid())
  userId     String
  category   String
  preference Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
}

// Modèle pour l'historique des interactions
model UserInteraction {
  id        String          @id @default(cuid())
  userId    String
  type      InteractionType
  details   Json
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modèle d'intégration
model Integration {
  id        String   @id @default(cuid())
  userId    String
  type      String
  data      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, type])
}

// Modèle d'abonnement
model Subscription {
  id        String   @id @default(cuid())
  userId    String
  plan      String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

// Modèle d'authentificateur
model Authenticator {
  id           String   @id @default(cuid())
  userId       String
  credentialId String
  publicKey    String
  counter      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, credentialId])
}

// ==================== Modèles Treezor ====================

// Modèle pour les bénéficiaires Treezor
model Beneficiary {
  id                   String   @id @default(cuid())
  userId               String
  treezorBeneficiaryId String?  @unique
  tag                  String?
  name                 String
  iban                 String?
  bic                  String?
  address              String?
  country              String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  SEPATransfer SEPATransfer[]
}

// Modèle pour les virements SEPA Treezor
model SEPATransfer {
  id                String         @id @default(cuid())
  userId            String
  treezorTransferId String?        @unique
  walletId          String
  beneficiaryId     String
  amount            Float
  currency          Currency
  label             String?
  reference         String?
  status            TransferStatus @default(PENDING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet      Wallet      @relation(fields: [walletId], references: [id])
  beneficiary Beneficiary @relation(fields: [beneficiaryId], references: [id])
}

// Modèle pour les paiements Treezor
model Payment {
  id               String        @id @default(cuid())
  userId           String
  treezorPaymentId String?       @unique
  walletId         String
  cardId           String?
  amount           Float
  currency         Currency
  status           PaymentStatus @default(PENDING)
  paymentType      PaymentType
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  wallet Wallet @relation(fields: [walletId], references: [id])
  card   Card?  @relation(fields: [cardId], references: [id])
}

// ==================== Enums ====================

// Rôles utilisateur
enum UserRole {
  USER     @map("U")
  ADMIN    @map("A")
  MERCHANT @map("M")

  @@map("user_role")
}

// Statuts utilisateur
enum UserStatus {
  INACTIVE  @map("I")
  ACTIVE    @map("A")
  PENDING   @map("P")
  VALIDATED @map("V")
  CANCELED  @map("C")

  @@map("user_status")
}

// Types de carte
enum CardType {
  BANK_CARD      @map("BC")
  LOYALTY_CARD   @map("LC")
  VIRTUAL_CARD   @map("VC")
  EPHEMERAL_CARD @map("EC")

  @@map("card_type")
}

// Statuts de carte
enum CardStatus {
  PENDING   @map("P")
  ISSUED    @map("I")
  SENT      @map("S")
  DELIVERED @map("D")
  ACTIVATED @map("A")
  CANCELLED @map("C")

  @@map("card_status")
}

// Statuts de PIN
enum PinStatus {
  SENT   @map("S")
  RESENT @map("R")

  @@map("pin_status")
}

// Types de limite d'utilisation
enum UsageLimitType {
  AMOUNT @map("A")
  COUNT  @map("C")

  @@map("usage_limit_type")
}

// Statuts de verrouillage
enum LockStatus {
  LOCKED   @map("L")
  UNLOCKED @map("U")

  @@map("lock_status")
}

// Types de compte bancaire
enum BankAccountType {
  CHECKING @map("C")
  SAVINGS  @map("S")
  CHILD    @map("CH")

  @@map("bank_account_type")
}

// Devises
enum Currency {
  EUR  @map("EUR")
  USD  @map("USD")
  GBP  @map("GBP")
  BTC  @map("BTC")
  ETH  @map("ETH")
  BNB  @map("BNB")
  YANI @map("YANI")

  @@map("currency")
}

// Types de transaction
enum TransactionType {
  DEPOSIT               @map("DEP")
  WITHDRAWAL            @map("WIT")
  TRANSFER              @map("TRA")
  PAYMENT               @map("PAY")
  CRYPTO_EXCHANGE       @map("CRY")
  CASHBACK              @map("CAS")
  DIRECT_DEBIT          @map("DDB")
  INTERNAL_TRANSFER     @map("INT")
  SEPA_TRANSFER         @map("SEP")
  INSTANT_TRANSFER      @map("INS")
  PERSONAL_CARD_PAYMENT @map("PCP")
  BUSINESS_CARD_PAYMENT @map("BCP")
  CARD_RELOAD           @map("CRL")
  MONEY_SEND            @map("MSE")

  @@map("transaction_type")
}

// Statuts de transaction
enum TransactionStatus {
  PENDING   @map("P")
  COMPLETED @map("C")
  FAILED    @map("F")
  CANCELLED @map("X")

  @@map("transaction_status")
}

// Types de frais de transaction
enum TransactionFeeType {
  DIRECT_DEBIT          @map("DDB")
  INTERNAL_TRANSFER     @map("INT")
  SEPA_TRANSFER         @map("SEP")
  INSTANT_TRANSFER      @map("INS")
  PERSONAL_CARD_PAYMENT @map("PCP")
  BUSINESS_CARD_PAYMENT @map("BCP")
  CARD_RELOAD           @map("CRL")
  MONEY_SEND            @map("MSE")
  RESTAURANT            @map("RES")
  GROCERIES             @map("GRO")
  BILL_PAYMENT          @map("BIL")
  FUEL                  @map("FUE")
  RENT                  @map("REN")
  SALARY                @map("SAL")

  @@map("transaction_fee_type")
}

// Validité des récompenses
enum RewardValidity {
  LIMITED_TIME   @map("LT")
  UNLIMITED_TIME @map("UT")

  @@map("reward_validity")
}

// Types de recommandation IA
enum RecommendationType {
  REWARD  @map("R")
  OFFER   @map("O")
  PRODUCT @map("P")
  SERVICE @map("S")

  @@map("recommendation_type")
}

// Types d'interaction utilisateur
enum InteractionType {
  PURCHASE @map("P")
  VIEW     @map("V")
  CLICK    @map("C")
  SEARCH   @map("S")
  FEEDBACK @map("F")

  @@map("interaction_type")
}

// Statuts KYC
enum KYCStatus {
  NONE      @map("N")
  PENDING   @map("P")
  VALIDATED @map("V")
  REFUSED   @map("R")

  @@map("kyc_status")
}

// Statuts de transfert
enum TransferStatus {
  PENDING   @map("P")
  VALIDATED @map("V")
  CANCELED  @map("C")
  FAILED    @map("F")

  @@map("transfer_status")
}

// Statuts de paiement
enum PaymentStatus {
  PENDING   @map("P")
  VALIDATED @map("V")
  CANCELED  @map("C")
  FAILED    @map("F")

  @@map("payment_status")
}

// Types de paiement
enum PaymentType {
  CARD         @map("C")
  TRANSFER     @map("T")
  DIRECT_DEBIT @map("D")

  @@map("payment_type")
}
